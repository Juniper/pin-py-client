# Copyright (c) 2022, Juniper Networks, Inc.
# All rights reserved.

# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaaSetupSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'brokers': 'list[str]',
        'paa_account': 'str',
        'security': 'PaasetupSchemaSecurity'
    }

    attribute_map = {
        'name': 'name',
        'brokers': 'brokers',
        'paa_account': 'paa-account',
        'security': 'security'
    }

    def __init__(self, name=None, brokers=None, paa_account=None, security=None):  # noqa: E501
        """PaaSetupSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._brokers = None
        self._paa_account = None
        self._security = None
        self.discriminator = None

        self.name = name
        self.brokers = brokers
        self.paa_account = paa_account
        if security is not None:
            self.security = security

    @property
    def name(self):
        """Gets the name of this PaaSetupSchema.  # noqa: E501

        Paragon Active Assurance setup name  # noqa: E501

        :return: The name of this PaaSetupSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaaSetupSchema.

        Paragon Active Assurance setup name  # noqa: E501

        :param name: The name of this PaaSetupSchema.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def brokers(self):
        """Gets the brokers of this PaaSetupSchema.  # noqa: E501


        :return: The brokers of this PaaSetupSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this PaaSetupSchema.


        :param brokers: The brokers of this PaaSetupSchema.  # noqa: E501
        :type: list[str]
        """
        if brokers is None:
            raise ValueError("Invalid value for `brokers`, must not be `None`")  # noqa: E501

        self._brokers = brokers

    @property
    def paa_account(self):
        """Gets the paa_account of this PaaSetupSchema.  # noqa: E501

        Paragon Active Assurance account  # noqa: E501

        :return: The paa_account of this PaaSetupSchema.  # noqa: E501
        :rtype: str
        """
        return self._paa_account

    @paa_account.setter
    def paa_account(self, paa_account):
        """Sets the paa_account of this PaaSetupSchema.

        Paragon Active Assurance account  # noqa: E501

        :param paa_account: The paa_account of this PaaSetupSchema.  # noqa: E501
        :type: str
        """
        if paa_account is None:
            raise ValueError("Invalid value for `paa_account`, must not be `None`")  # noqa: E501
        if paa_account is not None and len(paa_account) > 64:
            raise ValueError("Invalid value for `paa_account`, length must be less than or equal to `64`")  # noqa: E501

        self._paa_account = paa_account

    @property
    def security(self):
        """Gets the security of this PaaSetupSchema.  # noqa: E501


        :return: The security of this PaaSetupSchema.  # noqa: E501
        :rtype: PaasetupSchemaSecurity
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this PaaSetupSchema.


        :param security: The security of this PaaSetupSchema.  # noqa: E501
        :type: PaasetupSchemaSecurity
        """

        self._security = security

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaaSetupSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaaSetupSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
